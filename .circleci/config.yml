version: 2.1

commands:
jobs:
  checkout:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
#      - add_ssh_keys:
#          fingerprints:
#            - "$$SSHKEYFINGERPRINT"
#
#      - run:
#          name: update and add extra statements of updating the ssh config for each private ssh key
#          command: |
#            $PWD/scripts/update_sshconfig.sh private1
      - run: mkdir -p workspace
      - run: ls -al workspace
      - run:
          command: $PWD/scripts/findPublicationsToUpdate.sh /tmp/workspace $PWD/config/publication.json $PWD/
      - run: 
          command: $PWD/scripts/checkoutRepositories.sh /tmp/workspace $PWD/config/publication.json $PWD/config
      -run:
          command: $PWD/scripts/upgrade_config-4.sh /tmp/workspace $PWD/config
      - run: if [ -e /tmp/workspace/checkouts.txt ] ; then cat /tmp/workspace/checkouts.txt ; fi
      - run: if [ -e /tmp/workspace/rawcheckouts.txt ] ; then cat /tmp/workspace/rawcheckouts.txt ; fi
      - run: if [ -e /home/circleci/project/changes.txt ] ; then cat /home/circleci/project/changes.txt ; fi
      - run:
          name: List the files which have been created
          command: ls -al /tmp/workspace/*
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - checkouts.txt
            - rawcheckouts.txt
            - changedpublications.json
            - haschangedpublications.json
            - links.txt
            - src/
            - raw-input/
  extract-jsonld-details:
    docker:
      - image: informatievlaanderen/oslo-ea-to-rdf:json-ld-format-m1.1.1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Extract json details from UML diagram(s)
          command: $PWD/scripts/extract-what.sh jsonld
      - run:
          name: Show the report (for debugging purposes)
          command: |
            if [ -d /tmp/workspace/report ] ; then cat /tmp/workspace/report/*.report ; fi
      - run:
          name: List the files which have been created
          command: |
            if [ -d /tmp/workspace/report ] ; then ls -al /tmp/workspace/report/* ; fi
      - run:
          name: Show the errors found (for debugging purposes)
          command:
            egrep " ERROR " /tmp/workspace/report/*.report || true
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - checkouts.txt
            - links.txt
            - report/
            - tsv/
            - json/
            - src/
  extract-jsonld-details-4:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: touch a file
          command: |
            mkdir -p /tmp/workspace/report4
            touch /tmp/workspace/report4/.ignore04
      - run:
          name: install software
          command: sudo npm install --global @oslo-flanders/ea-converter
      - run:
          name: Extract json details from UML diagram(s)
          command: | 
            export CIRCLEWKD=$( eval echo "${CIRCLE_WORKING_DIRECTORY}" )
            ${CIRCLEWKD}/scripts/extract-what-4.sh jsonld
      - run:
          name: Show the report (for debugging purposes)
          command: |
            if [ -d /tmp/workspace/report4 ] ; then cat /tmp/workspace/report4/*.report ; fi || true
      - run:
          name: List the files which have been created
          command: |
            if [ -d /tmp/workspace/report4 ] ; then ls -al /tmp/workspace/report4/* ; fi || true
      - run:
          name: Show the errors found (for debugging purposes)
          command: |
            egrep " ERROR " /tmp/workspace/report4/*.report || true
            egrep " Error " /tmp/workspace/report4/*.report || true
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - report4/
  validate-report:
    docker:
      - image: informatievlaanderen/oslo-ea-to-rdf:json-ld-format-m1.1.1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check no errors found in the reports
          command:
            egrep " ERROR " /tmp/workspace/report/*.report || true ;
            [ $( egrep " ERROR " /tmp/workspace/report/*.report | wc -l ) == 0 ] || exit 1
  normalise-jsonld:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Normalise the recovered JSON-LD files (in the src directory)
          command: |
            $PWD/scripts/pretty-print-jsonfiles.sh /tmp/workspace
            mkdir -p /tmp/workspace/report /tmp/workspace/json /tmp/workspace/json
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - report/
            - json/
            - src/
  render-translation-json:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: upgrade configs to this toolchain
          command: |
            mkdir -p /tmp/workspace/translation
            $PWD/scripts/upgrade_config.sh /tmp/workspace $PWD/config
      - run:
          name: Render translation JSON from jsonld
          command: |
            mkdir -p /tmp/workspace/translation
            $PWD/scripts/render-details.sh /tmp/workspace multilingual $PWD/config
      - run:
          name: touch a file
          command: |
            touch /tmp/workspace/translation/.ignore04
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - translation/
            - src/
  validate-and-generate-translation-report:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: generate the reports
          command: |
            $PWD/scripts/render-details.sh /tmp/workspace report $PWD/config
      - run:
          name: Check no warnings found in the reports
          command:
            egrep " WARNING " /tmp/workspace/report/translation/*.report || true ;
            [ $( egrep " WARNING " /tmp/workspace/report/translation/*.report | wc -l ) == 0 ] || exit 1
  render-merged-jsonld:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render merged JSONLD from jsonld and translationjson
          command: |
            mkdir -p  /tmp/workspace/report
            $PWD/scripts/render-details.sh /tmp/workspace merge $PWD/config
      - run:
          name: touch a file
          command: |
            touch /tmp/workspace/report/.ignore05
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - report/
  render-html-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.4
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render HTML version of merged json file (a)
          command: |
            mkdir -p /tmp/workspace/target /tmp/workspace/reporthtml
            $PWD/scripts/render-details.sh /tmp/workspace html $PWD/config
      - run:
          name: copy the site-skeleton for the html
          command: $PWD/scripts/copy_skeleton.sh
      - run:
          name: List the html files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.html -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
            - reporthtml/
  render-html-details-4:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: touch a file
          command: |
            mkdir -p /tmp/workspace/report4
            touch /tmp/workspace/report4/.ignore04
      - run:
          name: install software
          command: sudo npm install --global @oslo-flanders/html-respec-generator
      - run:
          name: Render HTML version of merged json file (a)
          command: |
            mkdir -p /tmp/workspace/target /tmp/workspace/reporthtml
            export CIRCLEWKD=$( eval echo "${CIRCLE_WORKING_DIRECTORY}" )
            ${CIRCLEWKD}/scripts/render-details4.sh /tmp/workspace html $PWD/config
      - run:
          name: copy the site-skeleton for the html
          command: $PWD/scripts/copy_skeleton.sh
      - run:
          name: List the files which have been created
          command: |
            if [ -d /tmp/workspace/report4 ] ; then ls -al /tmp/workspace/report4/* ; fi || true
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - report4html/
            - report4/
  render-example-templates:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render example templates
          command: |
            mkdir -p /tmp/workspace/examples
            $PWD/scripts/render-details.sh /tmp/workspace example $PWD/config
      - run:
          name: touch a file
          command: |
            touch /tmp/workspace/examples/.ignore06
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - examples/
  render-context-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render Context Details
          command: |
            $PWD/scripts/render-details.sh /tmp/workspace context $PWD/config
            mkdir -p /tmp/workspace/target
      - run:
          name: List the context files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.jsonld -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  render-xsd-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render XSD Details
          command: |
            $PWD/scripts/render-details.sh /tmp/workspace xsd $PWD/config
            mkdir -p /tmp/workspace/target
      - run:
          name: List the xsd files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.xsd -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  render-shacl-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render Shacl details
          command: |
            mkdir -p /tmp/workspace/target /tmp/workspace/report
            $PWD/scripts/render-details.sh /tmp/workspace shacl $PWD/config
      - run:
          name: touch a file
          command: |
            touch /tmp/workspace/target/.ignore08
            touch /tmp/workspace/report/.ignore09
      - run:
          name: List the shacl files found
          command: find /tmp/workspace/target -name \*-SHACL.jsonld -type f
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
            - report/
  convert-json-to-ttl:
    docker:
      - image: cimg/ruby:3.0.2
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            gem install linkeddata
            mkdir -p /tmp/workspace/target
      - run:
          name: Convert -SHACL.jsonld file to -SHACL.ttl files
          command: |
            find /tmp/workspace/target -name \*-SHACL.jsonld -type f | $PWD/scripts/convert_to_any.sh turtle
      - run:
          name: List the -SHACL.ttl and context files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*-SHACL.ttl -type f ; fi
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.ttl -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  expand-links:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy raw assets
          workdir: /tmp/workspace
          command: |
            if [ -d raw ] ; then count="$( find raw -mindepth 1 -maxdepth 1 | wc -l )" ; if [ $count -ne 0 ] ; then cp -R raw/* /tmp/workspace/target/ ; fi  ; fi
      - run:
          name: expand default links
          command: |
            $PWD/scripts/expand-links.sh /tmp/workspace $PWD/config
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  render-voc-jsonld:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:multilingual-dev-0.3
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            mkdir -p /tmp/workspace/voc
      - run:
          name: touch a file
          command: |
            touch /tmp/workspace/voc/.ignore11
      - run:
          name: Generate vocabulary in baseformat jsonld
          command: |
            mkdir -p /tmp/workspace/target/doc/vocabularium
            $PWD/scripts/generate-voc.sh /tmp/workspace json $PWD/config
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  render-voc-rdf:
    docker:
      - image: cimg/ruby:3.0.2
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            gem install linkeddata
            mkdir -p /tmp/workspace/target/doc/vocabularium
      - run:
          name: touch a file
          command: |
            touch /tmp/workspace/target/.ignore12
      - run:
          name: Convert vocabulary to turtle
          command: |
            find /tmp/workspace/target/doc/vocabularium -name \*.jsonld -type f | $PWD/scripts/convert_to_any.sh turtle
      - run:
          name: Convert vocabulary to ntriples
          command: |
            find /tmp/workspace/target/doc/vocabularium -name \*.jsonld -type f | $PWD/scripts/convert_to_any.sh ntriples
      - run:
          name: Convert vocabulary to rdf/xml
          command: |
            find /tmp/workspace/target/doc/vocabularium -name \*.jsonld -type f | $PWD/scripts/convert_to_any.sh rdfxml
      - run:
          name: list results
          command: |
            if [ -d /tmp/workspace/voc ]; then ls /tmp/workspace/voc ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  copy-raw:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: List the files which should have been created
          command: |
            if [ -d /tmp/workspace/raw-input ] ; then ls -al /tmp/workspace/raw-input ; fi
      - run:
          name: copy /raw-input to where it is needed
          command: $PWD/scripts/extract-raw.sh raw
      - run:
          name: List the subdirs in raw
          command: |
            if [ -d /tmp/workspace/raw ] ; then ls -al /tmp/workspace/raw; else mkdir -p /tmp/workspace/raw ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - raw/
  create-artifact:
    parameters:
      generatedRepoFingerprint:
        type: string
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace

      - add_ssh_keys:
          fingerprints:
            - << parameters.generatedRepoFingerprint >>
      - run:
          name: update and add extra statements of updating the ssh config for each private ssh key
          command: |
            export GENERATEDREPO=$(jq -r .generatedrepository.repository $PWD/config/config.json)
            $PWD/scripts/update_sshconfig.sh ${GENERATEDREPO}
      - run:
          name: Checkout target repo
          command: |
            rm -rf /tmp/generated
            export REPO=$(jq -r .generatedrepository $PWD/config/config.json)
            $PWD/scripts/checkoutRepoGithub.sh "${REPO}" /tmp/generated ${TOOLCHAIN_TOKEN}
      - run:
          name: clean the generated directory
          workdir: /tmp/generated
          command: |
            git fetch origin
            git checkout -b "${CIRCLE_BRANCH}" --track "origin/${CIRCLE_BRANCH}" || git checkout "${CIRCLE_BRANCH}"
            if [ "`cat /tmp/workspace/haschangedpublications.json`" == "false" ] ; then git rm -r --force * ; fi
      - run:
          name: Copy static assets
          command: |
            cp -R site-skeleton/* /tmp/generated/
      - run:
          name: Copy generated assets
          workdir: /tmp/workspace
          command: |
            mkdir -p /tmp/generated/report
            if [ -d target ] ; then if [ ! "$(ls -A target)" ] ; then echo "directory target is empty" ; else pushd target ; cp -r * /tmp/generated/ ; popd ; fi fi
            if [ -d report ] ; then if [ ! "$(ls -A report)" ] ; then echo "directory report is empty" ; else cp -rT report /tmp/generated/report/ ; fi fi
            if [ -d report4 ] ; then if [ ! "$(ls -A report4)" ] ; then echo "directory report4 is empty" ; else cp -rT report4 /tmp/generated/report4/ ; fi fi
            if [ -d reporthtml ] ; then if [ ! "$(ls -A reporthtml)" ] ; then echo "directory reporthtml is empty" ; else cp -rT reporthtml /tmp/generated/report/ ; fi fi
            if [ -d json ] ; then if [ ! "$(ls -A json)" ] ; then echo "directory json is empty" ; else cp -rT json /tmp/generated/report/ ; fi fi
            if [ -d translation ] ; then if [ ! "$(ls -A translation)" ] ; then echo "directory translation is empty" ; else cp -rT translation /tmp/generated/report/ ; fi fi
            if [ -d examples ] ; then if [ ! "$(ls -A examples)" ] ; then echo "directory examples is empty" ; else cp -rT examples /tmp/generated/examples/ ; fi fi
      - run:
          name: check if all publication points are generated 
          workdir: /tmp/generated
          command: |
            ls -al *
            if [ -d report ] ; then ls -al report/* || ls -al report ; fi
            find report
      - run:
          name: check the existence of all publication points
          command: |
             $PWD/scripts/validate_publicationpoints.sh $PWD/config /tmp/generated false
             #$PWD/scripts/validate_publicationpoints.sh $PWD/config /tmp/generated true # enable this line to make the test blocking
      - run:
          name: check the support of paths by a publication points
          command: |
             $PWD/scripts/remove_obsolete_publicationpoints.sh $PWD/config /tmp/generated false
      - run:
          name: insert the commit
          workdir: /tmp/generated
          command: |
            export TAG=`echo "${CIRCLE_SHA1}" | cut -c1-15`
            echo "{\"commit\" : \"$TAG\"}" > report/commit.json
      - run:
          name: Push results to github
          workdir: /tmp/generated
          command: |
            # expand the tilde first
            export CIRCLEWKD=$( eval echo "${CIRCLE_WORKING_DIRECTORY}" )
            export EMAIL=$(jq -r .generatedrepository.gitEmail $CIRCLEWKD/config/config.json)
            export USER=$(jq -r .generatedrepository.gitUser $CIRCLEWKD/config/config.json)
            git config user.email "${EMAIL}"
            git config user.name "${USER}"
            git add .
            git status
            git commit -m "Applying changes from commit ${CIRCLE_SHA1}" --allow-empty
            export TAG=`echo "${CIRCLE_SHA1}" | cut -c1-15`
            git tag "${TAG}"
            git push --force origin "${CIRCLE_BRANCH}"
            git push --tags
workflows:
  version: 2
  generate_documentation:
    jobs:
      - checkout
      - extract-jsonld-details:
          requires:
            - checkout
      - extract-jsonld-details-4:
          requires:
            - checkout
      - normalise-jsonld:
          requires:
            - extract-jsonld-details
      - validate-report:
          requires:
            - extract-jsonld-details
      - render-merged-jsonld:
          requires:
            - render-translation-json
      - render-example-templates:
          requires:
            - render-merged-jsonld
      - render-html-details:
          requires:
            - render-merged-jsonld
      - render-html-details-4:
          requires:
            - extract-jsonld-details-4
      - render-voc-jsonld:
          requires:
            - render-merged-jsonld
      - render-voc-rdf:
          requires:
            - render-voc-jsonld
      - render-shacl-details:
          requires:
            - render-merged-jsonld
      - convert-json-to-ttl:
          requires:
            - render-shacl-details
      - render-context-details:
          requires:
            - render-merged-jsonld
#      - render-xsd-details:
#          requires:
#            - render-merged-jsonld
      - render-translation-json:
          requires:
            - normalise-jsonld
      - validate-and-generate-translation-report:
          requires:
            - render-translation-json
      - copy-raw:
          requires:
            - checkout
      - expand-links:
          requires:
            - render-html-details-4
            - render-example-templates
            - convert-json-to-ttl
            - render-html-details
            - copy-raw
            - render-context-details
            - render-voc-rdf
      - create-artifact:
          generatedRepoFingerprint: "f9:d4:ad:ce:f1:36:04:36:bc:eb:73:0b:29:53:3d:aa"
          requires:
            - expand-links
